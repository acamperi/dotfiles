"""""""""""""
""" Shell """
"""""""""""""

set shell=/bin/zsh


"""""""""""""""
""" Leaders """
"""""""""""""""

nnoremap <space> <nop>
let mapleader = " "
let maplocalleader = "\\"


"""""""""""""""
""" Plugins """
"""""""""""""""

call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')

Plug 'FooSoft/vim-argwrap'
Plug 'airblade/vim-gitgutter'
Plug 'dag/vim-fish'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'hashivim/vim-terraform'
Plug 'jiangmiao/auto-pairs'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'neovim/nvim-lspconfig'
Plug 'preservim/nerdtree'
Plug 'rust-lang/rust.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'srcery-colors/srcery-vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'uarun/vim-protobuf'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

call plug#end()


""""""""""""
""" Meta """
""""""""""""

nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>


""""""""""""""""""""
""" MacOS Remaps """
""""""""""""""""""""

nmap Ë™ <a-h>
nmap âˆ† <a-j>
nmap Ëš <a-k>
nmap Â¬ <a-l>
imap Ë™ <a-h>
imap âˆ† <a-j>
imap Ëš <a-k>
imap Â¬ <a-l>
vmap Ë™ <a-h>
vmap âˆ† <a-j>
vmap Ëš <a-k>
vmap Â¬ <a-l>


""""""""""""""""""""""""
""" General Settings """
""""""""""""""""""""""""

set nocompatible
set number
set belloff=all
set ruler
set showtabline=2
set laststatus=2
set termguicolors
set showcmd
set lazyredraw
set updatetime=100
set timeoutlen=500


"""""""""""""""""""""""
""" Window Settings """
"""""""""""""""""""""""

set splitright
set splitbelow
nnoremap <leader>q :q<cr>
for d in ["h", "j", "k", "l"]
    execute "nnoremap <silent> <c-".d."> <c-w>".d
    execute "inoremap <silent> <c-".d."> <c-\\><c-n><c-w>".d
    execute "tnoremap <silent> <c-".d."> <c-\\><c-n><c-w>".d
endfor
augroup terminsert
    autocmd!
    autocmd BufEnter * if &buftype ==# 'terminal' | :startinsert | endif
augroup END


"""""""""""""""""""""""""
""" Terminal Settings """
"""""""""""""""""""""""""

nnoremap <leader>st :split +terminal<cr>
nnoremap <leader>vt :vsplit +terminal<cr>
tnoremap <leader><esc> <c-\><c-n>


"""""""""""""""""""""
""" File Settings """
"""""""""""""""""""""

filetype off
filetype plugin indent on
set encoding=utf-8
set autoread
set autowrite
set noswapfile
set nobackup
set hidden
nnoremap <leader>w :w<cr>
set undolevels=1000
if has('persistent_undo')
    set undofile
    set undodir=~/.config/vim/tmp/undo//
endif
function! DeleteHiddenBuffers()
    let tpbl = []
    let closed = 0
    call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
    for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val) == -1')
        if getbufvar(buf, '&mod') == 0 && getbufvar(buf, '&buftype') !=# 'terminal'
            silent execute 'bwipeout' buf
            let closed += 1
        endif
    endfor
    echo "Closed ".closed." hidden buffers"
endfunction
nnoremap <leader>dhb :call DeleteHiddenBuffers()<cr>


""""""""""""""""""""
""" Text Editing """
""""""""""""""""""""

" general
set showmatch
set virtualedit=onemore
set backspace=indent,eol,start
set completeopt=menu,menuone
set pumheight=10
set clipboard=unnamed

" folding
set foldmethod=syntax
set foldnestmax=1

" wrapping
set wrap
set linebreak
set textwidth=0
augroup wrapping
    autocmd!
    autocmd FileType proto setlocal textwidth=100
    autocmd FileType go setlocal textwidth=120
    autocmd Filetype go,rust,terraform let b:argwrap_tail_comma = 1
augroup END
nnoremap <leader>aw :ArgWrap<cr>

" cursor
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"
augroup cursor_line
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

" whitespace
set shiftwidth=4
set shiftround
set tabstop=4
set softtabstop=0
set expandtab
set smarttab
set autoindent

" move lines up and down
nnoremap <a-j> :move .+1<CR>==
nnoremap <a-k> :move .-2<CR>==
inoremap <a-j> <Esc>:move .+1<CR>==gi
inoremap <a-k> <Esc>:move .-2<CR>==gi
vnoremap <a-j> :move '>+1<CR>gv=gv
vnoremap <a-k> :move '<-2<CR>gv=gv

" movements to paren groups
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap il( :<c-u>normal! F)vi(<cr>
onoremap an( :<c-u>normal! f(va(<cr>
onoremap al( :<c-u>normal! F)va(<cr>

" typos and snippets
iabbrev adn and
iabbrev hte the
augroup snippets
    autocmd!
    autocmd FileType c,go,rust,javascript :iabbrev <buffer> ret return
augroup END

" comments
augroup comments
    autocmd!
    autocmd FileType proto setlocal commentstring=//%s
    autocmd FileType sql setlocal commentstring=--%s
augroup END


""""""""""""""
""" Search """
""""""""""""""

set hlsearch
set ignorecase
set smartcase
set incsearch
nnoremap n nzz
nnoremap N Nzz
nnoremap / /\v\c
nnoremap ? ?\v\c


"""""""""""""""""""
""" Status Line """
"""""""""""""""""""

set statusline=%f\          " Path to the file
set statusline+=%h%w%m%r\   " Buffer status flags
set statusline+=%=          " Switch to the right side
set statusline+=\ %y\       " File type
set statusline+=%l:%c%V     " Current line and column(s)
let g:airline_theme = 'simple'
let g:airline_powerline_fonts = 1
let g:airline_section_b = ''
set noshowmode


""""""""""""""""
""" NERDTree """
""""""""""""""""

nnoremap <leader>n :NERDTreeFocus<cr>
nnoremap <leader>nn :NERDTree<cr>
nnoremap <leader>nt :NERDTreeToggle<cr>
nnoremap <leader>nf :NERDTreeFind<cr>
augroup nerdtree
    autocmd!
    autocmd StdInReadPre * let s:std_in = 1
    autocmd VimEnter * if exists("g:NERDTree") | NERDTree | if argc() > 0 || exists("s:std_in") | wincmd p | endif | endif
    autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
    " autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
augroup END
let g:NERDTreeShowHidden = 1
let g:NERDTreeIgnore = ['\.git$', '\.idea$']
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'
let g:NERDTreeWinSize = 40
let g:NERDTreeAutoDeleteBuffer = 1


"""""""""""
""" FZF """
"""""""""""

nnoremap <leader>o :GFiles --exclude-standard --cached --others<cr>
nnoremap <leader>O :Files<cr>
nnoremap <leader>/ :Rg<cr>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }
  " \ 'shift-k': 'preview-up',
  " \ 'shift-j': 'preview-down',
" \ 'ctrl-q': function('s:build_quickfix_list'),
" augroup fzf
"     autocmd! FileType fzf
"     autocmd FileType fzf 


"""""""""""""""""""""
""" Muscle Memory """
"""""""""""""""""""""

nnoremap <left> <nop>
nnoremap <down> <nop>
nnoremap <up> <nop>
nnoremap <right> <nop>
inoremap <left> <nop>
inoremap <down> <nop>
inoremap <up> <nop>
inoremap <right> <nop>
vnoremap <left> <nop>
vnoremap <down> <nop>
vnoremap <up> <nop>
vnoremap <right> <nop>


"""""""""""""""""""""""
""" Syntax Settings """
"""""""""""""""""""""""

if !exists("g:syntax_on")
    syntax enable
endif

set background=dark
let g:srcery_italic = 1
silent! colorscheme srcery
set t_ZH=[3m
set t_ZR=[23m


""""""""""""""
""" vim-go """
""""""""""""""

let g:go_fmt_command = "gofmt"
let g:go_imports_mode = "goimports"
let g:go_fmt_autosave = 1
let g:go_imports_autosave = 0
let g:go_jump_to_error = 0
let g:go_metalinter_autosave = 0
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"
let g:go_auto_sameids = 1
let g:go_auto_type_info = 1
let g:go_fmt_options = {
    \ "goimports": "-e -local gitlab.com/levelbenefits/level",
    \}

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1

augroup golang
    autocmd!
    autocmd FileType go nnoremap <buffer> <leader>b :GoBuild<cr>
    autocmd FileType go nnoremap <buffer> <leader>t :GoTest -timeout=120s<cr>
    autocmd FileType go nnoremap <buffer> <leader>tf :GoTestFunc -timeout=120s<cr>
    autocmd FileType go nnoremap <buffer> <leader>i :GoImports<cr>
    autocmd FileType go nnoremap <buffer> <leader>d :GoDef<cr>
    autocmd FileType go nnoremap <buffer> <leader>r :GoReferrers<cr>
augroup END


"""""""""""""""""""""
""" vim-terraform """
"""""""""""""""""""""

let g:terraform_fmt_on_save = 1
